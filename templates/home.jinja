{% extends "page.jinja" %}
{% block header %}
  <div class="actions">
    <a href="/profile" role="button">
      <img class="icon icon-inline" src="/static/icons/user.svg" alt="Profil">
      Profil
    </a>
    <a href="/upload" role="button">
      <img class="icon icon-inline" src="/static/icons/upload.svg" alt="Nahr√°t soubor">
      Nahr√°t soubor
    </a>
  </div>
{% endblock %}
{% block content %}
  <div class="subject-input" x-data="homepage">
    <h2>Nahran√© soubory</h2><br>

    <select name="grade" x-model="grade">
      <option value="0" selected>V≈°echny roƒçn√≠ky</option>
      <option value="1">Prima</option>
      <option value="2">Sekunda</option>
      <option value="3">Tercie</option>
      <option value="4">Kvarta</option>
      <option value="5">Kvinta</option>
      <option value="6">Sexta</option>
      <option value="7">Septima</option>
      <option value="8">Okt√°va</option>
    </select>
    <select name="subject" x-model="subject">
      <option value="" selected>V≈°echny p≈ôedmƒõty</option>
      <template x-for="[code, subject] in Object.entries(subjects)" :key="subject['name']">
        <option
          :value="code"
          :disabled="!(!parseInt(grade) || subject['grades'].includes(grade))"
          x-text="subject['emoji'] + ' ' + subject['name']"
        ></option>
      </template>
    </select>
    <input type="text" x-model="search" placeholder="Hledat">

    <hr>

    <div class="files">
      <template x-for="file in files" :key="file['id']">
        <span
          class="file"
          x-show="
            (grade === '0' || file['grade'] === parseInt(grade))
              && (subject === '' || file['subject'] === subject)
              && (search === '' || fuzzy(file['name'], search))"
        >
          <div>
            <div x-text="file['name'] + '¬†' + (['jpeg', 'jpg', 'png', 'webp'].includes(file['filename'].split('.').slice(-1)[0]) ? ' üñºÔ∏è' : ' üìÑ')"></div>
            <div class="icons">
              <big
                x-text="file['score']"
                :style="{ color: file['score'] > 0 ? '#ffaa00' : file['score'] < 0 ? '#9999ff' : 'inherit' }">
              </big>

              <span
                target="_blank"
                class="upvote"
                :class="{ 'active': votes[file['filename']] === 1 }"
                @click="await vote(file, 1)"
              >
                <img
                  src="/static/icons/upvote.svg"
                  class="icon"
                  alt="Upvote"
                >
              </span>

              <span
                target="_blank"
                class="downvote"
                :class="{ 'active': votes[file['filename']] === -1 }"
                @click="await vote(file, -1)"
              >
                <img
                  src="/static/icons/downvote.svg"
                  class="icon"
                  alt="Downvote"
                >
              </span>

              <a :href="'/files/' + file['filename']" target="_blank">
                <img class="icon" src="/static/icons/download.svg" alt="St√°hnout" width="16" height="16">
              </a>
            </div>
          </div>
          <kbd x-text="file['grade']"></kbd>
          ¬∑
          <span x-text="subjects[file['subject']]['emoji'] + ' ' + subjects[file['subject']]['name']"></span>
        </span>
      </template>
    </div>
  </div>

  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.data('homepage', function () {
        return {
          grade: this.$persist(0),
          subjects: {{ subjects | safe }},
          subject: this.$persist(''),
          files: {{ files | safe }},
          search: this.$persist(''),
          votes: {{ votes | safe }},

          init () {
            Object.fromEntries(
              Object
                .entries(this.subjects)
                .map($ => $[1].grades = $[1].grades.map(g => g.toString()))
            )
          },

          fuzzy (str, pattern) {
            return (new RegExp(pattern.split("").join(".*"))).test(str)
          },

          async unvote (file, vote) {
            await fetch(`/unvote/${file.filename}`)

            file['score'] -= this.votes[file.filename]

            this.votes = {
              ...this.votes,
              [file.filename]: 0
            }
          },

          async vote (file, vote) {
            if (vote === this.votes[file.filename]) {
              await this.unvote(file, vote)
            } else {
              if (this.votes[file.filename] !== 0) {
                await this.unvote(file, vote)
              }

              await fetch(`/${
                (vote === 1)
                  ? 'upvote'
                  : 'downvote'
              }/${file.filename}`)

              this.votes = {
                ...this.votes,
                [file.filename]: vote
              }

              file['score'] += vote
            }
          }
        }
      })
    })
  </script>
{% endblock %}
